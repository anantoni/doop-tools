Soot Tools
----------------------------------------------------------------------

Authors
   * Martin Bravenboer <martin.bravenboer@gmail.com>

License
  MIT license (see LICENSE)

Installation
----------------------------------------------------------------------

Adapt the location of Soot in ./compile and run the script.

The bin directory provides a script bytecode2jimple. Adapt the
location of soot and soot-tools.jar.

Yeah, I'll do ant at some point.

Running
----------------------------------------------------------------------

Examples:

$ bytecode2jimple Main.class -lsystem

    Converts Main.class to Jimple and prints the result to standard
    output.

$ bytecode2jimple Main.class -l foo.jar -lsystem

    Converts Main.class to Jimple and prints the result to standard
    output. Classes referenced by Main.class are found in foo.jar and
    the standard system jars (rt.jar and jce.jar).

$ bytecode2jimple Main.class -lsystem -o Main.jimple

    Converts Main.class to Jimple and prints the result to Main.jimple 

$ bytecode2jimple Main.class Foo.class -lsystem -d output

    Converts Main.class and Foo.class to Jimple and writes the results
    to 'output/Main.jimple' and 'output/Foo.jimple'.

$ bytecode2jimple /pkg/aspectj/lib/aspectjrt.jar -lsystem -d output

    Converts all classes in aspectjrt.jar to Jimple and writes the
    resulting .jimple files to the directory 'output'

$ bytecode2jimple Main.class -lsystem -full -d output 

    Converts Main.class and all classes that Main.class directly or
    indirectly refers to (full transitive resolution mode). The
    results are written to the directory 'output'. This mode is useful
    for whole-program analysis tools. Note: this option can take a
    while: an empty Java program already results in 2042 Jimple files
    in Java 6.

$ bytecode2jimple Main.class -l /usr/share/classpath/glibj.zip -full -d output

    Idem as the previous command, but uses the GNU Classpath
    library. The location of glibj.zip is obviously system
    dependent. Older versions of the GNU Classpath library is useful
    in combination with the -full option: for a simple Java program
    older versions return about 450 classes. With a recent JDK (or GNU
    Classpath) then number of classes is at least 2000.
